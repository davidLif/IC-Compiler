
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import java.util.ArrayList;
import java.util.List;
import IC.LiteralTypes;
import IC.DataTypes;
import IC.BinaryOps;
import IC.UnaryOps;
import java_cup.runtime.Symbol;
import IC.LiteralTypes;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\010" +
    "\000\002\004\007\000\002\007\003\000\002\007\004\000" +
    "\002\007\003\000\002\007\004\000\002\011\006\000\002" +
    "\011\005\000\002\012\004\000\002\012\005\000\002\006" +
    "\003\000\002\006\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\013\003\000\002\013\003\000\002\005\013\000\002" +
    "\005\012\000\002\005\012\000\002\005\011\000\002\005" +
    "\011\000\002\005\012\000\002\014\004\000\002\015\004" +
    "\000\002\015\005\000\002\016\004\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\003\000\002" +
    "\020\004\000\002\021\006\000\002\021\004\000\002\021" +
    "\005\000\002\021\004\000\002\021\011\000\002\021\007" +
    "\000\002\021\007\000\002\021\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\007\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\006\000" +
    "\002\022\007\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\022\005\000\002\024" +
    "\003\000\002\024\005\000\002\024\006\000\002\032\002" +
    "\000\002\031\007\000\002\031\010\000\002\030\010\000" +
    "\002\030\006\000\002\030\007\000\002\030\005\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\004\000\002\027\004\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\006\002\uffae\025\007\001\002\000\006\002" +
    "\001\025\007\001\002\000\004\002\303\001\002\000\004" +
    "\002\uffff\001\002\000\004\005\011\001\002\000\006\002" +
    "\ufffe\025\ufffe\001\002\000\006\006\012\036\uffae\001\002" +
    "\000\004\005\302\001\002\000\004\036\015\001\002\000" +
    "\004\036\ufff2\001\002\000\020\005\030\007\022\010\024" +
    "\011\017\012\020\013\025\035\026\001\002\000\020\005" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\035\ufffa" +
    "\001\002\000\006\004\ufff0\040\ufff0\001\002\000\006\004" +
    "\uffef\040\uffef\001\002\000\020\005\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\035\ufff8\001\002\000\014\005" +
    "\030\010\271\011\017\012\020\013\025\001\002\000\020" +
    "\005\030\007\022\010\024\011\017\012\020\013\025\035" +
    "\266\001\002\000\004\004\254\001\002\000\006\004\uffee" +
    "\040\uffee\001\002\000\006\002\ufffb\025\ufffb\001\002\000" +
    "\006\004\032\040\031\001\002\000\006\004\uffed\040\uffed" +
    "\001\002\000\004\037\107\001\002\000\010\033\036\042" +
    "\035\043\033\001\002\000\004\004\253\001\002\000\006" +
    "\042\251\043\250\001\002\000\020\005\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\035\ufff5\001\002\000\014" +
    "\005\030\011\017\012\020\013\025\034\uffae\001\002\000" +
    "\006\034\uffdf\043\243\001\002\000\004\034\uffdd\001\002" +
    "\000\006\004\242\040\031\001\002\000\004\034\uffde\001" +
    "\002\000\004\034\044\001\002\000\004\036\045\001\002" +
    "\000\056\004\065\005\051\011\017\012\020\013\025\014" +
    "\061\015\063\017\053\020\071\021\047\022\066\023\075" +
    "\026\076\027\067\030\072\031\100\032\062\033\052\035" +
    "\060\036\056\045\073\061\057\001\002\000\042\040\uffc8" +
    "\041\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\062\237\001\002\000\004\042\236\001\002\000" +
    "\040\040\134\041\136\044\131\045\123\046\125\047\135" +
    "\050\126\051\140\052\124\053\132\054\141\055\130\056" +
    "\127\057\122\060\142\001\002\000\010\004\uffed\040\uffed" +
    "\041\113\001\002\000\032\004\065\005\111\022\066\023" +
    "\075\026\076\027\067\030\072\031\100\032\062\033\052" +
    "\045\073\061\057\001\002\000\004\033\230\001\002\000" +
    "\006\004\223\040\031\001\002\000\050\034\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\001\002\000\056\004" +
    "\065\005\051\011\017\012\020\013\025\014\061\015\063" +
    "\017\053\020\071\021\047\022\066\023\075\026\076\027" +
    "\067\030\072\031\100\032\062\033\052\035\220\036\056" +
    "\045\073\061\057\001\002\000\032\004\065\005\111\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\045\073\061\057\001\002\000\020\005\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\035\uffe6\001\002" +
    "\000\034\004\065\005\111\022\066\023\075\026\076\027" +
    "\067\030\072\031\100\032\062\033\052\042\215\045\073" +
    "\061\057\001\002\000\050\034\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\001\002\000\004\033\206\001\002" +
    "\000\050\034\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\001\002\000\054\033\202\034\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\062\uffb1\001\002\000\050\034" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002" +
    "\000\050\034\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\001\002\000\056\004\065\005\051\011\017\012\020" +
    "\013\025\014\061\015\063\017\053\020\071\021\047\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\035\200\036\056\045\073\061\057\001\002\000" +
    "\004\042\177\001\002\000\050\034\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\001\002\000\032\004\065\005" +
    "\111\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\045\073\061\057\001\002\000\050\034" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002" +
    "\000\012\005\103\011\017\012\020\013\025\001\002\000" +
    "\050\034\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\042\040\uffc7\041\uffc7\042\102\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\001\002\000" +
    "\050\034\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\001\002\000\056\004\uffdc\005\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\035\uffdc\036\uffdc\045\uffdc\061\uffdc\001\002\000\060" +
    "\004\uffd9\005\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\036\uffd9\045\uffd9\061\uffd9\001\002\000\006\033\174" +
    "\040\uffed\001\002\000\004\040\105\001\002\000\034\004" +
    "\065\005\111\022\066\023\075\026\076\027\067\030\072" +
    "\031\100\032\062\033\052\037\107\045\073\061\057\001" +
    "\002\000\050\034\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\006\004\uffec\040\uffec\001\002\000" +
    "\042\037\173\040\134\041\136\044\131\045\123\046\125" +
    "\047\135\050\126\051\140\052\124\053\132\054\141\055" +
    "\130\056\127\057\122\060\142\001\002\000\004\041\113" +
    "\001\002\000\050\034\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\001\002\000\004\004\114\001\002\000\004" +
    "\033\115\001\002\000\034\004\065\005\111\022\066\023" +
    "\075\026\076\027\067\030\072\031\100\032\062\033\052" +
    "\034\117\045\073\061\057\001\002\000\044\034\uffa5\040" +
    "\134\041\136\043\137\044\131\045\123\046\125\047\135" +
    "\050\126\051\140\052\124\053\132\054\141\055\130\056" +
    "\127\057\122\060\142\001\002\000\050\034\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\001\002\000\004\034" +
    "\121\001\002\000\050\034\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\001\002\000\032\004\065\005\111\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\045\073\061\057\001\002\000\032\004\065\005" +
    "\111\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\045\073\061\057\001\002\000\032\004" +
    "\065\005\111\022\066\023\075\026\076\027\067\030\072" +
    "\031\100\032\062\033\052\045\073\061\057\001\002\000" +
    "\032\004\065\005\111\022\066\023\075\026\076\027\067" +
    "\030\072\031\100\032\062\033\052\045\073\061\057\001" +
    "\002\000\032\004\065\005\111\022\066\023\075\026\076" +
    "\027\067\030\072\031\100\032\062\033\052\045\073\061" +
    "\057\001\002\000\032\004\065\005\111\022\066\023\075" +
    "\026\076\027\067\030\072\031\100\032\062\033\052\045" +
    "\073\061\057\001\002\000\032\004\065\005\111\022\066" +
    "\023\075\026\076\027\067\030\072\031\100\032\062\033" +
    "\052\045\073\061\057\001\002\000\032\004\065\005\111" +
    "\022\066\023\075\026\076\027\067\030\072\031\100\032" +
    "\062\033\052\045\073\061\057\001\002\000\032\004\065" +
    "\005\111\022\066\023\075\026\076\027\067\030\072\031" +
    "\100\032\062\033\052\045\073\061\057\001\002\000\006" +
    "\034\uffa4\043\160\001\002\000\032\004\065\005\111\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\045\073\061\057\001\002\000\032\004\065\005" +
    "\111\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\045\073\061\057\001\002\000\006\004" +
    "\147\024\150\001\002\000\032\004\065\005\111\022\066" +
    "\023\075\026\076\027\067\030\072\031\100\032\062\033" +
    "\052\045\073\061\057\001\002\000\032\004\065\005\111" +
    "\022\066\023\075\026\076\027\067\030\072\031\100\032" +
    "\062\033\052\045\073\061\057\001\002\000\032\004\065" +
    "\005\111\022\066\023\075\026\076\027\067\030\072\031" +
    "\100\032\062\033\052\045\073\061\057\001\002\000\032" +
    "\004\065\005\111\022\066\023\075\026\076\027\067\030" +
    "\072\031\100\032\062\033\052\045\073\061\057\001\002" +
    "\000\050\034\uffb6\037\uffb6\040\uffb6\041\136\042\uffb6\043" +
    "\uffb6\044\131\045\123\046\125\047\135\050\126\051\140" +
    "\052\124\053\132\054\141\055\130\056\127\057\uffb6\060" +
    "\uffb6\001\002\000\050\034\uffba\037\uffba\040\uffba\041\136" +
    "\042\uffba\043\uffba\044\131\045\123\046\125\047\135\050" +
    "\126\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\001\002\000\050\034\uffbd\037\uffbd\040" +
    "\uffbd\041\136\042\uffbd\043\uffbd\044\131\045\123\046\125" +
    "\047\135\050\126\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\044\034\uffa3" +
    "\040\134\041\136\043\uffa3\044\131\045\123\046\125\047" +
    "\135\050\126\051\140\052\124\053\132\054\141\055\130" +
    "\056\127\057\122\060\142\001\002\000\054\033\151\034" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\062\uffb0" +
    "\001\002\000\050\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\001\002\000\034\004\065\005\111\022\066" +
    "\023\075\026\076\027\067\030\072\031\100\032\062\033" +
    "\052\034\152\045\073\061\057\001\002\000\050\034\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\001\002\000" +
    "\004\034\154\001\002\000\050\034\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\001\002\000\050\034\uffbf\037" +
    "\uffbf\040\uffbf\041\136\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000\042" +
    "\037\157\040\134\041\136\044\131\045\123\046\125\047" +
    "\135\050\126\051\140\052\124\053\132\054\141\055\130" +
    "\056\127\057\122\060\142\001\002\000\052\034\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\001\002" +
    "\000\032\004\065\005\111\022\066\023\075\026\076\027" +
    "\067\030\072\031\100\032\062\033\052\045\073\061\057" +
    "\001\002\000\044\034\uffa2\040\134\041\136\043\uffa2\044" +
    "\131\045\123\046\125\047\135\050\126\051\140\052\124" +
    "\053\132\054\141\055\130\056\127\057\122\060\142\001" +
    "\002\000\050\034\uffbb\037\uffbb\040\uffbb\041\136\042\uffbb" +
    "\043\uffbb\044\131\045\123\046\125\047\135\050\126\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\050\034\uffc2\037\uffc2\040\uffc2\041" +
    "\136\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\125\047\135" +
    "\050\126\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\001\002\000\050\034\uffb9\037\uffb9" +
    "\040\uffb9\041\136\042\uffb9\043\uffb9\044\131\045\123\046" +
    "\125\047\135\050\126\051\140\052\124\053\132\054\141" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\050\034" +
    "\uffb8\037\uffb8\040\uffb8\041\136\042\uffb8\043\uffb8\044\131" +
    "\045\123\046\125\047\135\050\126\051\140\052\124\053" +
    "\132\054\141\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002" +
    "\000\050\034\uffbe\037\uffbe\040\uffbe\041\136\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\050\034\uffc0\037\uffc0\040\uffc0\041\136" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\050\034\uffbc\037\uffbc\040" +
    "\uffbc\041\136\042\uffbc\043\uffbc\044\131\045\123\046\125" +
    "\047\135\050\126\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000\050\034\uffc1" +
    "\037\uffc1\040\uffc1\041\136\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\125\047\135\050\126\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002\000" +
    "\050\034\uffb7\037\uffb7\040\uffb7\041\136\042\uffb7\043\uffb7" +
    "\044\131\045\123\046\125\047\135\050\126\051\140\052" +
    "\124\053\132\054\141\055\130\056\127\057\uffb7\060\uffb7" +
    "\001\002\000\050\034\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\060\uffc4\001\002\000\004\034\175\001\002\000\050" +
    "\034\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001" +
    "\002\000\050\034\uffb5\037\uffb5\040\uffb5\041\136\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\001\002\000\060\004\uffd3\005\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\045\uffd3\061\uffd3" +
    "\001\002\000\020\005\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\035\uffe8\001\002\000\056\004\uffdb\005\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\045\uffdb\061" +
    "\uffdb\001\002\000\034\004\065\005\111\022\066\023\075" +
    "\026\076\027\067\030\072\031\100\032\062\033\052\034" +
    "\203\045\073\061\057\001\002\000\050\034\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\001\002\000\004\034" +
    "\205\001\002\000\050\034\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\032\004\065\005\111\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\045\073\061\057\001\002\000\042\034\210\040" +
    "\134\041\136\044\131\045\123\046\125\047\135\050\126" +
    "\051\140\052\124\053\132\054\141\055\130\056\127\057" +
    "\122\060\142\001\002\000\054\004\065\005\051\011\017" +
    "\012\020\013\025\014\061\015\063\017\053\020\071\021" +
    "\047\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\036\056\045\073\061\057\001\002\000" +
    "\060\004\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\212\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\035\uffd5\036\uffd5\045\uffd5\061\uffd5\001\002\000\054\004" +
    "\065\005\051\011\017\012\020\013\025\014\061\015\063" +
    "\017\053\020\071\021\047\022\066\023\075\026\076\027" +
    "\067\030\072\031\100\032\062\033\052\036\056\045\073" +
    "\061\057\001\002\000\060\004\uffd6\005\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\045\uffd6\061\uffd6" +
    "\001\002\000\042\040\134\041\136\042\216\044\131\045" +
    "\123\046\125\047\135\050\126\051\140\052\124\053\132" +
    "\054\141\055\130\056\127\057\122\060\142\001\002\000" +
    "\060\004\uffd7\005\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\035\uffd7\036\uffd7\045\uffd7\061\uffd7\001\002\000\060\004" +
    "\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\045\uffd8\061\uffd8\001\002\000\050\034\uffb4\037" +
    "\uffb4\040\uffb4\041\136\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\060" +
    "\004\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035" +
    "\uffd0\036\uffd0\045\uffd0\061\uffd0\001\002\000\056\004\065" +
    "\005\051\011\017\012\020\013\025\014\061\015\063\017" +
    "\053\020\071\021\047\022\066\023\075\026\076\027\067" +
    "\030\072\031\100\032\062\033\052\035\222\036\056\045" +
    "\073\061\057\001\002\000\060\004\uffd1\005\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\045\uffd1\061" +
    "\uffd1\001\002\000\006\042\224\062\225\001\002\000\060" +
    "\004\uffcf\005\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035" +
    "\uffcf\036\uffcf\045\uffcf\061\uffcf\001\002\000\032\004\065" +
    "\005\111\022\066\023\075\026\076\027\067\030\072\031" +
    "\100\032\062\033\052\045\073\061\057\001\002\000\042" +
    "\040\134\041\136\042\227\044\131\045\123\046\125\047" +
    "\135\050\126\051\140\052\124\053\132\054\141\055\130" +
    "\056\127\057\122\060\142\001\002\000\060\004\uffce\005" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce" +
    "\045\uffce\061\uffce\001\002\000\032\004\065\005\111\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\045\073\061\057\001\002\000\042\034\232\040" +
    "\134\041\136\044\131\045\123\046\125\047\135\050\126" +
    "\051\140\052\124\053\132\054\141\055\130\056\127\057" +
    "\122\060\142\001\002\000\054\004\065\005\051\011\017" +
    "\012\020\013\025\014\061\015\063\017\053\020\071\021" +
    "\047\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\036\056\045\073\061\057\001\002\000" +
    "\060\004\uffd4\005\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\036\uffd4\045\uffd4\061\uffd4\001\002\000\042\034" +
    "\235\040\134\041\136\044\131\045\123\046\125\047\135" +
    "\050\126\051\140\052\124\053\132\054\141\055\130\056" +
    "\127\057\122\060\142\001\002\000\050\034\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\060\004" +
    "\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\045\uffd2\061\uffd2\001\002\000\032\004\065\005" +
    "\111\022\066\023\075\026\076\027\067\030\072\031\100" +
    "\032\062\033\052\045\073\061\057\001\002\000\042\040" +
    "\134\041\136\042\241\044\131\045\123\046\125\047\135" +
    "\050\126\051\140\052\124\053\132\054\141\055\130\056" +
    "\127\057\122\060\142\001\002\000\060\004\uffda\005\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\045" +
    "\uffda\061\uffda\001\002\000\006\034\uffe3\043\uffe3\001\002" +
    "\000\012\005\030\011\017\012\020\013\025\001\002\000" +
    "\006\034\uffe0\043\245\001\002\000\012\005\030\011\017" +
    "\012\020\013\025\001\002\000\006\034\uffe1\043\uffe1\001" +
    "\002\000\006\034\uffe2\043\uffe2\001\002\000\004\004\252" +
    "\001\002\000\020\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\035\ufff6\001\002\000\006\042\ufff3\043\ufff3" +
    "\001\002\000\006\042\ufff4\043\ufff4\001\002\000\004\033" +
    "\255\001\002\000\014\005\030\011\017\012\020\013\025" +
    "\034\uffae\001\002\000\004\034\257\001\002\000\004\036" +
    "\260\001\002\000\056\004\065\005\051\011\017\012\020" +
    "\013\025\014\061\015\063\017\053\020\071\021\047\022" +
    "\066\023\075\026\076\027\067\030\072\031\100\032\062" +
    "\033\052\035\261\036\056\045\073\061\057\001\002\000" +
    "\020\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\035\uffe5\001\002\000\056\004\065\005\051\011\017\012" +
    "\020\013\025\014\061\015\063\017\053\020\071\021\047" +
    "\022\066\023\075\026\076\027\067\030\072\031\100\032" +
    "\062\033\052\035\263\036\056\045\073\061\057\001\002" +
    "\000\020\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\035\uffe7\001\002\000\020\005\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\035\ufff9\001\002\000\020\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\035\ufff7" +
    "\001\002\000\006\002\ufffc\025\ufffc\001\002\000\006\004" +
    "\uffeb\040\031\001\002\000\004\004\272\001\002\000\004" +
    "\004\uffea\001\002\000\004\033\273\001\002\000\014\005" +
    "\030\011\017\012\020\013\025\034\uffae\001\002\000\004" +
    "\034\275\001\002\000\004\036\276\001\002\000\056\004" +
    "\065\005\051\011\017\012\020\013\025\014\061\015\063" +
    "\017\053\020\071\021\047\022\066\023\075\026\076\027" +
    "\067\030\072\031\100\032\062\033\052\035\277\036\056" +
    "\045\073\061\057\001\002\000\020\005\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\035\uffe4\001\002\000\056" +
    "\004\065\005\051\011\017\012\020\013\025\014\061\015" +
    "\063\017\053\020\071\021\047\022\066\023\075\026\076" +
    "\027\067\030\072\031\100\032\062\033\052\035\301\036" +
    "\056\045\073\061\057\001\002\000\020\005\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\035\uffe9\001\002\000" +
    "\004\036\ufff1\001\002\000\004\002\000\001\002\000\006" +
    "\002\ufffd\025\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\012\002\004\003\003\004\007\032\005\001" +
    "\001\000\004\004\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\012\032\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\015\007\022\010\026\011" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\266\013\267\001" +
    "\001\000\010\005\263\010\026\011\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\040\014\036\016\041\017\042\032\037" +
    "\001\001\000\004\015\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\053\020\067\021\100\022\047\023" +
    "\073\024\045\025\076\030\054\031\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\022\233\023\073\024\105\025\111\030\054" +
    "\031\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\053\020\220\021\100\022\047" +
    "\023\073\024\045\025\076\030\054\031\063\001\001\000" +
    "\016\022\216\023\073\024\105\025\111\030\054\031\063" +
    "\001\001\000\002\001\001\000\016\022\213\023\073\024" +
    "\105\025\111\030\054\031\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\053\021\200" +
    "\022\047\023\073\024\045\025\076\030\054\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\175" +
    "\023\073\024\105\025\111\030\054\031\063\001\001\000" +
    "\002\001\001\000\004\010\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\107\023\073\024\105\025\111\030\054\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\115\023\073\024\105\025\111" +
    "\026\117\030\054\031\063\001\001\000\004\027\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\171\023\073\024\105\025\111\030\054\031" +
    "\063\001\001\000\016\022\170\023\073\024\105\025\111" +
    "\030\054\031\063\001\001\000\016\022\167\023\073\024" +
    "\105\025\111\030\054\031\063\001\001\000\016\022\166" +
    "\023\073\024\105\025\111\030\054\031\063\001\001\000" +
    "\016\022\165\023\073\024\105\025\111\030\054\031\063" +
    "\001\001\000\016\022\164\023\073\024\105\025\111\030" +
    "\054\031\063\001\001\000\016\022\163\023\073\024\105" +
    "\025\111\030\054\031\063\001\001\000\016\022\162\023" +
    "\073\024\105\025\111\030\054\031\063\001\001\000\016" +
    "\022\161\023\073\024\105\025\111\030\054\031\063\001" +
    "\001\000\002\001\001\000\016\022\155\023\073\024\105" +
    "\025\111\030\054\031\063\001\001\000\016\022\154\023" +
    "\073\024\105\025\111\030\054\031\063\001\001\000\002" +
    "\001\001\000\016\022\145\023\073\024\105\025\111\030" +
    "\054\031\063\001\001\000\016\022\144\023\073\024\105" +
    "\025\111\030\054\031\063\001\001\000\016\022\143\023" +
    "\073\024\105\025\111\030\054\031\063\001\001\000\016" +
    "\022\142\023\073\024\105\025\111\030\054\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\115\023\073\024\105\025\111\026\152\030\054" +
    "\031\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\160\023\073\024\105\025\111\030" +
    "\054\031\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\115\023" +
    "\073\024\105\025\111\026\203\030\054\031\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\206\023\073\024\105\025\111\030\054\031\063" +
    "\001\001\000\002\001\001\000\022\010\053\021\210\022" +
    "\047\023\073\024\045\025\076\030\054\031\063\001\001" +
    "\000\002\001\001\000\022\010\053\021\212\022\047\023" +
    "\073\024\045\025\076\030\054\031\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\053" +
    "\021\200\022\047\023\073\024\045\025\076\030\054\031" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\225\023\073\024\105\025\111\030" +
    "\054\031\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\230\023\073\024\105\025\111\030\054\031" +
    "\063\001\001\000\002\001\001\000\022\010\053\021\232" +
    "\022\047\023\073\024\045\025\076\030\054\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\237\023\073\024\105\025" +
    "\111\030\054\031\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\040\014\246\001" +
    "\001\000\002\001\001\000\006\010\040\014\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\040\014\036\016\041\017\255\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\053\020\261\021\100\022\047\023\073\024\045\025" +
    "\076\030\054\031\063\001\001\000\002\001\001\000\022" +
    "\010\053\021\200\022\047\023\073\024\045\025\076\030" +
    "\054\031\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\040\014\036\016\041\017\273\032\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\053\020\277" +
    "\021\100\022\047\023\073\024\045\025\076\030\054\031" +
    "\063\001\001\000\002\001\001\000\022\010\053\021\200" +
    "\022\047\023\073\024\045\025\076\030\054\031\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private SyntaxError err;

	public void syntax_error(Symbol cur_token) {

		expected_token_ids();
		List<Integer> lst_tokens = expected_token_ids();
		err =  new SyntaxError((Token)cur_token, lst_tokens);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws SyntaxError
	{
		throw err;
	}
	
	public int getLine()
	{
		return 0;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(lst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= empty 
            {
              Program RESULT =null;
		 RESULT = new Program(new ArrayList<ICClass>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= icclass 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ICClass>();
	   RESULT.add(c); 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= class_list icclass 
            {
              List<ICClass> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // icclass ::= CLASS CLASSID extends_opt CLP fields_methods_list CRP 
            {
              ICClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* with a given method\field list */
		List<Field> fields = new ArrayList<Field>();
		List<Method> methods = new ArrayList<Method>();
		for(ASTNode item : lst)
		{
			if(item instanceof Field)
				fields.add((Field)item);
			else
				methods.add((Method)item);
		}
		if(superclass == null)
			RESULT = new ICClass( -1, name, fields, methods);
		else
			RESULT = new ICClass(-1, name, superclass, fields, methods);
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icclass",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // icclass ::= CLASS CLASSID extends_opt CLP CRP 
            {
              ICClass RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int superclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int superclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String superclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  /* empty class */
		List<Field> fields = new ArrayList<Field>();
		List<Method> methods = new ArrayList<Method>();
		if(superclass == null)
			RESULT = new ICClass( -1, name, fields, methods);
		else
			RESULT = new ICClass(-1, name, superclass, fields, methods);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("icclass",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fields_methods_list ::= method 
            {
              List<ASTNode> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new ArrayList<ASTNode>();
		RESULT.add(m);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fields_methods_list ::= fields_methods_list method 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		lst.add(m);
		RESULT = lst;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields_methods_list ::= field_collection 
            {
              List<ASTNode> RESULT =null;
		int field_colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Field> field_col = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new ArrayList<ASTNode>();
		for(Field field : field_col)
		{
			RESULT.add(field);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields_methods_list ::= fields_methods_list field_collection 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int field_colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Field> field_col = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = lst;
		for(Field field: field_col)
		{
			lst.add(field);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_methods_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field_collection ::= type ID field_id_list SEMCOL 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> lst = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new ArrayList<Field>();
		
		// add the first field
		RESULT.add(new Field(t, name));     
		
		// add the rest of the fields (same type)
		for(String n : lst)
		{
			RESULT.add(new Field(t, n));
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_collection",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field_collection ::= type ID SEMCOL 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new ArrayList<Field>();
		RESULT.add(new Field(t, name));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_collection",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field_id_list ::= COMMA ID 
            {
              List<String> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>();
	   RESULT.add(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_id_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // field_id_list ::= field_id_list COMMA ID 
            {
              List<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> lst = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lst; RESULT.add(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_id_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // extends_opt ::= empty 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_opt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // extends_opt ::= EXTENDS CLASSID 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = name; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_opt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType( -1, DataTypes.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType( -1, DataTypes.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType( -1, DataTypes.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= CLASSID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserType( -1, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= type SQUARELB SQUARERB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = t; RESULT.incrementDimension(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return_type ::= type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // return_type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(-1, DataTypes.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method ::= STATIC return_type ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		/* static method with statement list*/
		RESULT = new StaticMethod(t, name, formals, stmts);
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method ::= type ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		/* virtual method, non void, method with statement list */
			RESULT = new VirtualMethod(t, name, formals, stmts);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method ::= VOID ID LP formal_list_opt RP CLP stmt_lst CRP 
            {
              Method RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		/* void virtual method with statement list */
			RESULT = new VirtualMethod(new PrimitiveType(-1, DataTypes.VOID), name, formals, stmts);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method ::= type ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		/* non void virtual method without statement list */
		RESULT = new VirtualMethod(t, name, formals, new ArrayList<Statement>());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method ::= VOID ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		/* void virtual method without statement list */
		RESULT = new VirtualMethod(new PrimitiveType(-1, DataTypes.VOID), name, formals, new ArrayList<Statement>());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method ::= STATIC return_type ID LP formal_list_opt RP CLP CRP 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
		/* static method without statement list */
		RESULT = new StaticMethod(t, name, formals, new ArrayList<Statement>());
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formal ::= type ID 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comma_formal_list ::= COMMA formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>(); RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comma_formal_list ::= comma_formal_list COMMA formal 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(f); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_formal_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // formal_list ::= formal comma_formal_list 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Formal>();
	   RESULT.add(f);
	   for(Formal formal : lst)
	   {
	   		RESULT.add(formal);
	   }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // formal_list ::= formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new ArrayList<Formal>(); RESULT.add(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal_list_opt ::= formal_list 
            {
              List<Formal> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Formal> lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_list_opt ::= empty 
            {
              List<Formal> RESULT =null;
		 RESULT = new ArrayList<Formal>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list_opt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_lst ::= stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt_lst ::= stmt_lst stmt 
            {
              List<Statement> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> lst = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= location ASSIGN expr SEMCOL 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(loc, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= call SEMCOL 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStatement(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= RETURN expr SEMCOL 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(getLine(), exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= RETURN SEMCOL 
            {
              Statement RESULT =null;
		 RESULT = new Return(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement st1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(exp, st1, st2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= IF LP expr RP stmt 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(exp,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= WHILE LP expr RP stmt 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(exp , st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= BREAK SEMCOL 
            {
              Statement RESULT =null;
		 RESULT = new Break(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= CONTINUE SEMCOL 
            {
              Statement RESULT =null;
		 RESULT =  new Continue(getLine());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= CLP stmt_lst CRP 
            {
              Statement RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementsBlock(getLine(),statements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= CLP CRP 
            {
              Statement RESULT =null;
		 RESULT = new StatementsBlock(getLine(), new ArrayList<Statement>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= type ID SEMCOL 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= type ID ASSIGN expr SEMCOL 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t, name, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(getLine(),LiteralTypes.INTEGER, val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(getLine(),LiteralTypes.STRING, str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(),LiteralTypes.FALSE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= NULL 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(),LiteralTypes.NULL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.TRUE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= call 
            {
              Expression RESULT =null;
		int call_expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int call_expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call call_exp = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call_exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(getLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= NEW CLASSID LP RP 
            {
              Expression RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String class_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewClass(getLine(), class_name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= NEW type SQUARELB expr SQUARERB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(t, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Length(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr ADD expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.PLUS, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MINUS, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MULTIPLY, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.DIVIDE, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new MathBinaryOp(exp_1, BinaryOps.MOD, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr LESSTHAN expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LT, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr LESSTHANEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LTE, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr GREATERTHAN expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.GT, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr GREATERTHANEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.GTE, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.EQUAL, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr NOTEQ expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.NEQUAL, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LAND, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int exp_1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp_1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp_1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp_2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp_2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp_2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
		RESULT = new LogicalBinaryOp(exp_1, BinaryOps.LOR, exp_2);
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
			RESULT = new MathUnaryOp(UnaryOps.UMINUS, exp); 

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		
			RESULT = new LogicalUnaryOp(UnaryOps.LNEG, exp); 

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		 RESULT = l;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= LP expr RP 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionBlock(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // location ::= ID 
            {
              Location RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // location ::= expr DOT ID 
            {
              Location RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), exp, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // location ::= expr SQUARELB expr SQUARERB 
            {
              Location RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLocation(array, index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // empty ::= 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // static_call ::= CLASSID DOT ID LP RP 
            {
              StaticCall RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String class_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StaticCall(1, class_name, name, new ArrayList<Expression>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // static_call ::= CLASSID DOT ID LP exp_list RP 
            {
              StaticCall RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String class_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticCall(1, class_name, name, lst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("static_call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // virtual_call ::= expr DOT ID LP exp_list RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(1, e, name, lst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // virtual_call ::= ID LP exp_list RP 
            {
              VirtualCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(1, null, name, lst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // virtual_call ::= expr DOT ID LP RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VirtualCall(1, e, name, new ArrayList<Expression>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // virtual_call ::= ID LP RP 
            {
              VirtualCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VirtualCall(1, null, name, new ArrayList<Expression>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtual_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // call ::= virtual_call 
            {
              Call RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VirtualCall val = (VirtualCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // call ::= static_call 
            {
              Call RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StaticCall val = (StaticCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp_list ::= expr 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp_list ::= expr exp_comma_list 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			List<Expression> res = new ArrayList<Expression>();
			res.add(exp);
			for(Expression e:lst)
			{
				res.add(e);
			}
			RESULT = res;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp_comma_list ::= COMMA expr 
            {
              List<Expression> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_comma_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp_comma_list ::= exp_comma_list COMMA expr 
            {
              List<Expression> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(exp); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_comma_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
